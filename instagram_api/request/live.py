from instagram_api import response

from .base import CollectionBase

__all__ = ['Live']


class Live(CollectionBase):

    def get_suggested_broadcasts(self) -> response.SuggestedBroadcastsResponse: ...

    def get_info(self, broadcast_id: int) -> response.BroadcastInfoResponse: ...

    def get_viewer_list(self, broadcast_id: int) -> response.ViewerListResponse: ...

    def get_final_viewer_list(self, broadcast_id: int) -> response.FinalViewerListResponse: ...

    def get_post_live_viewer_list(self,
                                  broadcast_id: int,
                                  max_id: str = None) -> response.PostLiveViewerListResponse: ...

    def get_heartbeat_and_viewer_count(self,
                                       broadcast_id: int) -> response.BroadcastHeartbeatAndViewerCountResponse: ...

    def get_join_request_counts(self,
                                broadcast_id: int,
                                last_total_count: int = 0,
                                last_seen_ts: int = 0,
                                last_fetch_ts: int = 0) -> response.BroadcastJoinRequestCountResponse: ...

    def show_question(self, broadcast_id: int, question_id: int) -> response.GenericResponse: ...

    def hide_question(self, broadcast_id: int, question_id: int) -> response.GenericResponse: ...

    def question(self, broadcast_id: int, question_text: str) -> response.GenericResponse: ...

    def get_questions(self) -> response.BroadcastQuestionsResponse: ...

    def get_live_broadcast_questions(self, broadcast_id: int) -> response.BroadcastQuestionsResponse: ...

    def wave(self, broadcast_id: int, viewer_id: int) -> response.GenericResponse: ...

    def comment(self, broadcast_id: int, comment_text: str) -> response.CommentBroadcastResponse: ...

    def pin_comment(self, broadcast_id: int, comment_id: int) -> response.PinCommentBroadcastResponse: ...

    def unpin_comment(self, broadcast_id: int, comment_id: int) -> response.UnpinCommentBroadcastResponse: ...

    def get_comments(self,
                     broadcast_id: int,
                     last_comment_ts: int = 0,
                     comments_requested: int = 3) -> response.BroadcastCommentsResponse: ...

    def get_post_live_comments(self,
                               broadcast_id: int,
                               starting_offset: int = 0,
                               encoding_tag: str = 'instagram_dash_remuxed') -> response.PostLiveCommentsResponse: ...

    def enable_comments(self, broadcast_id: int) -> response.EnableDisableLiveCommentsResponse: ...

    def disable_comments(self, broadcast_id: int) -> response.EnableDisableLiveCommentsResponse: ...

    def like(self, broadcast_id: int, like_count: int = 1) -> response.BroadcastLikeResponse: ...

    def get_like_count(self, broadcast_id: int, like_ts: int = 0) -> response.BroadcastLikeCountResponse: ...

    def get_post_live_likes(self,
                            broadcast_id: int,
                            starting_offset: int = 0,
                            encoding_tag: str = 'instagram_dash_remuxed') -> response.PostLiveLikesResponse: ...

    def create(self, preview_width: int = 720, preview_height: int = 1184) -> response.CreateLiveResponse: ...

    def start(self, broadcast_id: int) -> response.GenericResponse: ...

    def resume_broadcast_after_content_match(self, broadcast_id: int) -> response.GenericResponse: ...

    def end(self, broadcast_id: int, copyright_warning: bool = False) -> response.GenericResponse: ...

    def add_to_post_live(self, broadcast_id: int) -> response.GenericResponse: ...

    def delete_post_live(self, broadcast_id: int) -> response.GenericResponse: ...
